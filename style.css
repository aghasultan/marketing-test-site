/* ==========================================================
   script.js â€“ interactive particle web + reveal + mobile nav
   ========================================================== */
document.addEventListener('DOMContentLoaded', () => {
  /* remove fallback */
  document.body.classList.remove('no-js');

  /* -------- CONFIG -------- */
  const DENSITY = 9000;
  const MAX = 350;
  const GREEN = 'rgba(0,168,107,0.4)';
  const GREEN_STROKE = 'rgba(0,168,107,';
  const CONNECT = 7;
  const reduce = matchMedia('(prefers-reduced-motion: reduce)').matches;

  /* -------- CANVAS -------- */
  const canvas = document.getElementById('interactive-bg');
  const ctx = canvas.getContext('2d');
  const mouse = { x:null, y:null, radius:(innerHeight/100)*(innerWidth/100) };
  let particles = [];

  function resizeCanvas(){
    canvas.width = innerWidth;
    canvas.height = innerHeight;
    if(!reduce) init();
  }

  class Particle{
    constructor(x,y,dx,dy,s){this.x=x;this.y=y;this.dx=dx;this.dy=dy;this.s=s;}
    draw(){ctx.beginPath();ctx.arc(this.x,this.y,this.s,0,Math.PI*2);ctx.fillStyle=GREEN;ctx.fill();}
    update(){
      if(this.x>canvas.width||this.x<0)  this.dx=-this.dx;
      if(this.y>canvas.height||this.y<0) this.dy=-this.dy;
      /* push away from cursor/touch */
      const dx=(mouse.x??-9999)-this.x, dy=(mouse.y??-9999)-this.y, dist=Math.hypot(dx,dy);
      if(dist<mouse.radius+this.s){
        if(mouse.x<this.x&&this.x<canvas.width-this.s*10) this.x+=5;
        if(mouse.x>this.x&&this.x>this.s*10)              this.x-=5;
        if(mouse.y<this.y&&this.y<canvas.height-this.s*10) this.y+=5;
        if(mouse.y>this.y&&this.y>this.s*10)              this.y-=5;
      }
      this.x+=this.dx; this.y+=this.dy; this.draw();
    }
  }

  function init(){
    particles=[];
    const count=Math.min(MAX,(canvas.width*canvas.height)/DENSITY);
    for(let i=0;i<count;i++){
      const s=Math.random()*2+1;
      particles.push(new Particle(
        Math.random()*(canvas.width-s*2)+s*2,
        Math.random()*(canvas.height-s*2)+s*2,
        (Math.random()*0.4)-0.2,
        (Math.random()*0.4)-0.2,
        s));
    }
  }

  function connect(){
    for(let a=0;a<particles.length;a++){
      for(let b=a;b<particles.length;b++){
        const dx=particles[a].x-particles[b].x,
              dy=particles[a].y-particles[b].y,
              dist=dx*dx+dy*dy;
        if(dist<(canvas.width/CONNECT)*(canvas.height/CONNECT)){
          ctx.strokeStyle=GREEN_STROKE+(1-dist/20000)+')';
          ctx.lineWidth=1;
          ctx.beginPath();
          ctx.moveTo(particles[a].x,particles[a].y);
          ctx.lineTo(particles[b].x,particles[b].y);
          ctx.stroke();
        }
      }
    }
  }

  function animate(){
    ctx.clearRect(0,0,canvas.width,canvas.height);
    particles.forEach(p=>p.update());
    connect();
    requestAnimationFrame(animate);
  }

  /* -- init & listeners -- */
  resizeCanvas(); if(!reduce) animate();
  addEventListener('mousemove',e=>{mouse.x=e.clientX;mouse.y=e.clientY;});
  addEventListener('pointermove',e=>{
    if(e.pointerType!=='mouse'){mouse.x=e.clientX;mouse.y=e.clientY;}
  });
  ['mouseout','pointerout'].forEach(evt=>addEventListener(evt,()=>{mouse.x=mouse.y=null;}));
  addEventListener('resize',()=>{resizeCanvas();mouse.radius=(innerHeight/100)*(innerWidth/100);});

  /* Reveal on scroll */
  const io=new IntersectionObserver(ents=>{
    ents.forEach(ent=>{
      if(ent.isIntersecting){
        const d=parseInt(ent.target.dataset.delay||0,10);
        setTimeout(()=>ent.target.classList.add('visible'),d);
      }
    });
  },{threshold:0.1});
  document.querySelectorAll('.reveal').forEach(el=>io.observe(el));

  /* Mobile nav */
  const btn=document.getElementById('mobile-nav-toggle');
  const nav=document.getElementById('navbar');
  btn.addEventListener('click',()=>{
    const open=nav.classList.toggle('active');
    btn.classList.toggle('active');
    btn.setAttribute('aria-expanded',open);
    document.body.classList.toggle('no-scroll',open);
  });
});
